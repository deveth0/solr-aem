<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:cq="http://www.day.com/jcr/cq/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
          jcr:primaryType="cq:Page">
  <jcr:content
    cq:template="/apps/wcm-io-samples/sample-app/templates/content/content"
    jcr:primaryType="cq:PageContent"
    jcr:title="NesC"
    sling:resourceType="/apps/wcm-io-samples/sample-app/components/content/page/content">
    <content
      jcr:primaryType="nt:unstructured"
      sling:resourceType="wcm-io/wcm/parsys/components/parsys">
      <contentheadline
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentHeadline"
        headline="NesC" />
      <contentrichtext
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentRichText"
        text="&lt;p&gt;{{about|the programming language|the safety code|National Electrical Safety Code}}
{{lowercase|nesC}}
&amp;apos;&amp;apos;&amp;apos;nesC&amp;apos;&amp;apos;&amp;apos; (&amp;apos;&amp;apos;&amp;apos;n&amp;apos;&amp;apos;&amp;apos;etwork &amp;apos;&amp;apos;&amp;apos;e&amp;apos;&amp;apos;&amp;apos;mbedded &amp;apos;&amp;apos;&amp;apos;s&amp;apos;&amp;apos;&amp;apos;ystems C), pronounced &amp;quot;NES-see&amp;quot;, is a [[Component-oriented_programming|component-based]], [[Event-driven programming|event-driven]] [[programming language]] used to build applications for the [[TinyOS]] platform. TinyOS is an [[operating environment]] designed to run on embedded devices used in distributed [[wireless sensor network]]s. nesC is built as an extension to the [[C (programming language)|C programming language]] with components &amp;quot;wired&amp;quot; together to run applications on TinyOS.

The basic concepts behind nesC are:

# Separation of construction and composition: programs are built out of components, which are assembled (&amp;quot;wired&amp;quot;) to form whole programs. Components have internal concurrency in the form of tasks. Threads of control may pass into a component through its interfaces. These threads are rooted either in a task or a hardware interrupt.
# Specification of component behaviour in terms of set of interfaces. Interfaces may be provided or used by components. The provided interfaces are intended to represent the functionality that the component provides to its user, the used interfaces represent the functionality the component needs to perform its job.
# Interfaces are bidirectional: they specify a set of functions to be implemented by the interface&amp;apos;s provider (commands) and a set to be implemented by the interface&amp;apos;s user (events). This allows a single interface to represent a complex interaction between components (e.g., registration of interest in some event, followed by a callback when that event happens). This is critical because all lengthy commands in TinyOS (e.g. send packet) are non-blocking; their completion is signaled through an event (send done). By specifying interfaces, a component cannot call the send command unless it provides an implementation of the sendDone event. Typically commands call downwards, i.e., from application components to those closer to the hardware, while events call upwards. Certain primitive events are bound to hardware interrupts.
# Components are statically linked to each other via their interfaces. This increases runtime efficiency, encourages robust design, and allows for better static analysis of programs.
# nesC is designed under the expectation that code will be generated by whole-program compilers. This should also allow for better code generation and analysis.

==External links==
* [http://www.tinyos.net/ www.tinyos.net]
* [http://nescc.sourceforge.net/ nesC at sourceforge.net]

[[Category:Wireless sensor network]]
[[Category:C programming language family]]

{{Wireless Sensor Network}}
{{Wireless-stub}}
{{Compu-lang-stub}}&lt;/p&gt;" />
    </content>
  </jcr:content>
</jcr:root>
