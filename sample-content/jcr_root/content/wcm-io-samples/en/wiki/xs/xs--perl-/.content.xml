<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:cq="http://www.day.com/jcr/cq/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
          jcr:primaryType="cq:Page">
  <jcr:content
    cq:template="/apps/wcm-io-samples/sample-app/templates/content/content"
    jcr:primaryType="cq:PageContent"
    jcr:title="XS (Perl)"
    sling:resourceType="/apps/wcm-io-samples/sample-app/components/content/page/content">
    <content
      jcr:primaryType="nt:unstructured"
      sling:resourceType="wcm-io/wcm/parsys/components/parsys">
      <contentheadline
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentHeadline"
        headline="XS (Perl)" />
      <contentrichtext
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentRichText"
        text="&lt;p&gt;&amp;apos;&amp;apos;&amp;apos;XS&amp;apos;&amp;apos;&amp;apos; is an interface through which a program written in the [[Perl]] [[programming language]] can call a [[C (programming language)|C]] or [[C++]] language [[subroutine]]. The letters stand for eXternal Subroutine, or xsub, where &amp;apos;&amp;apos;external&amp;apos;&amp;apos; means external to Perl, i.e. written in some other language.

It may be desirable for a Perl program to invoke a C subroutine in order to handle very [[CPU]] or [[RAM|memory]] intensive tasks, to interface with [[computer hardware|hardware]] or low-level system facilities, or to make use of existing C subroutine libraries.

The Perl [[interpreter (computing)|interpreter]] is a C program, so in principle there is no obstacle to calling from Perl to C. However, the XS interface is complex, and using it requires some understanding of the interpreter. The earliest reference on the subject was the [http://search.cpan.org/dist/perl/pod/perlguts.pod perlguts] [[Plain Old Documentation|POD]], the word &amp;apos;&amp;apos;guts&amp;apos;&amp;apos; suggesting the highly technical nature of the material.

Subroutine libraries in Perl are called &amp;apos;&amp;apos;modules&amp;apos;&amp;apos;, and modules that contain xsubs are called &amp;apos;&amp;apos;XS modules&amp;apos;&amp;apos;. Perl provides a framework for developing, packaging, distributing, and installing modules. To create an XS module, h2xs is first used to create an empty module. Next, C subroutines are added, and the calling interfaces to the C subroutines are specified with a specialized glue language (also referred to as XS). Finally, the module is [[compiler|compiled]], tested, and installed with [[Make (software)|make]].

Once an XS module is installed, it can be loaded into a Perl program with a &amp;apos;&amp;apos;use&amp;apos;&amp;apos; statement, like an ordinary [[Perl module]]. Once the module is loaded, the C subroutines can be called from Perl code, as if they were written in Perl.

XS modules are not without drawbacks.  They are difficult to write and maintain, and they may only be installed if a [[C compiler]] and the [[header file]]s that the Perl interpreter was compiled against are available.  Also, new versions of Perl may break [[binary compatibility]]; if this happens, all XS modules must be recompiled.

It is also possible to write XS modules that [[Wrapper function|wrap]] [[C++]] code. Doing so is mostly a matter of configuring the module [[Software build|build]] system.&amp;lt;ref&amp;gt;{{cite web|url=http://www.johnkeiser.com/perl-xs-c++.html|title=Gluing C++ And Perl Together|date=August 27, 2001|publisher=johnkeiser.com}}&amp;lt;/ref&amp;gt;

==See also==

*[[SWIG]], an alternative to XS which also supports calling C and C++ functions from several other languages.

==References==
{{reflist}}
* Jenness, Tim &amp;amp; [[Simon Cozens|Cozens, Simon]] (2002). &amp;quot;Extending and Embedding Perl&amp;quot;. Greenwich: Manning Publications Co. ISBN 1-930110-82-0

==External links==

* [http://perldoc.perl.org/perlxs.html perlxs] Perl XS application programming interface
* [http://perldoc.perl.org/perlxstut.html perlxstut] Perl XS tutorial
* [http://search.cpan.org/dist/perl/pod/perlguts.pod perlguts] Perl internal functions for those doing extensions
* [http://search.cpan.org/dist/perl/autodoc.pl perlapi] Perl API listing (autogenerated)
* [http://world.std.com/~swmcd/steven/perl/pm/xs/intro/index.html XS Mechanics] tutorial
* [http://www.johnkeiser.com/perl-xs-c++.html Perl and C++] building XS modules for C++

{{Perl}}

[[Category:Perl]]&lt;/p&gt;" />
    </content>
  </jcr:content>
</jcr:root>
