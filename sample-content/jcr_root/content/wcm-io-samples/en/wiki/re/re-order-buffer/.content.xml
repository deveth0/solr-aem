<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:cq="http://www.day.com/jcr/cq/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
          jcr:primaryType="cq:Page">
  <jcr:content
    cq:template="/apps/wcm-io-samples/sample-app/templates/content/content"
    jcr:primaryType="cq:PageContent"
    jcr:title="Re-order buffer"
    sling:resourceType="/apps/wcm-io-samples/sample-app/components/content/page/content">
    <content
      jcr:primaryType="nt:unstructured"
      sling:resourceType="wcm-io/wcm/parsys/components/parsys">
      <contentheadline
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentHeadline"
        headline="Re-order buffer" />
      <contentrichtext
        jcr:primaryType="nt:unstructured"
        sling:resourceType="wcm-io-samples/sample-app/components/content/common/contentRichText"
        text="&lt;p&gt;A &amp;apos;&amp;apos;&amp;apos;re-order buffer&amp;apos;&amp;apos;&amp;apos; (&amp;apos;&amp;apos;ROB&amp;apos;&amp;apos;) is used in a [[Tomasulo algorithm]] for [[out-of-order execution|out-of-order]] instruction execution.  It allows instructions to be committed in-order.

Normally, there are three stages of instructions: &amp;quot;Issue&amp;quot;, &amp;quot;Execute&amp;quot;, &amp;quot;Write Result&amp;quot;. In [[Tomasulo algorithm]], an additional stage called &amp;quot;commit&amp;quot; came up. In this stage, results of instructions will be stored in the register or memory. And in the &amp;quot;Write Result&amp;quot; stage, the results are just put in the re-order buffer. All contents in this buffer can be used when executing other instructions depending on these.

There are additional fields in every entry of the buffer:
* Instruction type (jump, store to memory, store to register)
* Destination (either memory address or register number)
* Result (value that goes to destination or indication of a (un)successful jump)
* Validity (does the result already exist?)

Additional benefits of the re-order buffer include allowing for precise [[Exception handling|exceptions]] and easy [[Rollback (data management)|rollback]] control of [[Branch target predictor|target address mispredictions]] (branch or jump).
The ROB works by storing instructions in their original fetched order. The ROB can also be accessed from the side since each reservation station (in [[Tomasulo algorithm]]) has an additional parameter that points to instruction in the ROB. When jump prediction is not correct or a nonrecoverable exception is encountered in the instruction stream, the ROB is cleared of all instructions and reservation stations are re-initialized.

==External links==
*[http://lgjohn.okstate.edu/6253/lectures/reorder.pdf Reorder Buffer]

[[Category:Instruction processing]]


{{comp-sci-stub}}&lt;/p&gt;" />
    </content>
  </jcr:content>
</jcr:root>
